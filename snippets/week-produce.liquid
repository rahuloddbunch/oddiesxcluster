<style>
  .week-harvest {
    background-color: transparent;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;

    --main-color: #7C223C;
    --main-color-dark: #691c32;
    --secondary-color: #BFDCCB;
    border-radius: 2rem;
  }
  
  .week-harvest.open {
    background-color: var(--secondary-color);
  }

  .week-harvest-header-controller {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    cursor: pointer;
    background-color: transparent;
    -webkit-tap-highlight-color: transparent;
  }

  .week-harvest-header-controller .controller-caret {
    transition: transform 0.3s ease;
    transform: rotate(0deg);
  }

  .week-harvest-header-controller h2 {
    text-align: center;
    font-size: 20px;
  }

  .week-harvest.wp-hidden,.week-harvest .wp-hidden {
    max-height: 0;
    opacity: 0;
  }

  .week-harvest .wp-flip {
    transform: rotate(180deg);
  }

  .week-harvest-title {
    display: flex;
    flex-direction: row;
    {% comment %} justify-content: space-between; {% endcomment %}
    justify-content: center;
    gap: 0.5rem;
    align-items: center;

    color: #000;

    white-space: nowrap;
    width: 100%;
    box-sizing: border-box;

    font-size: 15px;
    line-height: 22px;
  }

  .week-harvest-title,.week-harvest-content {
    overflow: hidden;
    max-height: 2000px;
    {% comment %}
      transition: max-height 0.3s ease, opacity 0.3s ease, padding 0.3s ease;
    {% endcomment %}
    opacity: 1;
  }

  .week-harvest-title-heading {
    padding: 0.75rem 0.5rem;
    text-align: center;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  @media screen and (max-width: 1024px) {
    .week-harvest-title {
      flex-direction: column-reverse;
    }
  }

  .custom-select-wrapper {
    display: none;
  }

  .week-harvest-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));

    gap: 0.625rem;
  }

  .week-harvest-content.wp-hidden {
    padding: 0;
    gap: 0;
  }

  .week-harvest-content-item {
    display: flex;
    flex-direction: column;
    text-align: center;
    gap: 0.625rem;
    box-sizing: border-box;
    padding: 0.5rem;
  }

  .week-harvest-content-item-image {
    align-self: center;
  }

  .week-harvest-content-item-description {
    display: flex;
    flex-grow: 1;
    flex-direction: column;
    gap: 0.25rem;
    line-height: 1em;
  }

  .week-harvest-content-item-description-title {
    flex-grow: 1;
    color: #000000;
    font-weight: 700;
  }

  .week-harvest-content-item-description-quantity {
    color: #000000;
    font-weight: 400;
  }

  .custom-select {
    display: inline-block;
    position: relative;
    border-style: solid;
    border-color: white;
    border-width: 0.25rem;
    border-radius: 1rem;
    margin: 0.625rem 0;
  }

  .custom-select:has(div.select-arrow-active) {
    border-bottom-color: transparent;
  }
  
  .select-items div,.custom-select {
    padding: 0.25rem 0.625rem;
  }

  .custom-select select {
    display: none;
  }

  .select-selected {
    background-color: var(--main-color);
    margin: 0 0.2rem;
  }

  .select-selected:after {
    position: absolute;
    content: url("data:image/svg+xml,%3Csvg width='12' height='7' viewBox='0 0 12 7' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10.6332 0.598877L5.83109 5.40098L1.02899 0.598877' stroke='white' stroke-linecap='round'/%3E%3C/svg%3E%0A");
    height: 100%;
    top: 5%;
    right: 10%;
    width: 0;
    height: 0;
  }

  .select-selected.select-arrow-active:after {
    border-color: transparent transparent #fff transparent;
    content: url("data:image/svg+xml,%3Csvg width='12' height='7' viewBox='0 0 12 7' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.02898 6.40088L5.83108 1.59878L10.6332 6.40088' stroke='white' stroke-linecap='round'/%3E%3C/svg%3E%0A");
  }

  .select-items div,.select-selected {
    cursor: pointer;
  }

  .select-items div {
    background-color: var(--main-color);
    border-style: solid;
    border-color: white;
    border-width: 0 0.25rem 0 0.25rem;
  }

  .select-items div:last-of-type:not(:first-of-type) {
    border-bottom: 0.25rem;
    border-color: white;
    border-style: solid;
  }

  .select-items div:last-of-type {
    border-bottom-left-radius: 1rem;
    border-bottom-right-radius: 1rem;
  }

  .select-items {
    position: absolute;
    background-color: transparent;
    top: 100%;
    left: -0.2rem;
    right: -0.2rem;
    z-index: 99;
  }

  .custom-select:has(div.select-arrow-active) {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }

  .select-hide {
    display: none;
  }

  .select-items div:not([disabled]):hover, div.same-as-selected {
    background-color: var(--main-color-dark);
  }

  .select-items div[disabled] {
    text-decoration: line-through;
  }

  .noselect {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
</style>

{% capture sydney_content %}
  {% for produce in product.metafields.custom.sydney_area_produce.value %}
    <div
      class="week-harvest-content-item"
      data-location="sydney"
    >
      <div class="title-sec"><span class="week-harvest-content-item-description-title">{{ produce.name.value }}</span></div>
      {{ produce.type.value.image.value | image_url: width: 32, height: 32 | image_tag: class: "week-harvest-content-item-image" }}
      <span class="week-harvest-content-flag flag-{{ produce.flag_name.value | downcase }}"></span>
      <span class="week-harvest-content-item-description">
        <span class="week-harvest-content-item-description-quantity">{{ produce.quantity.value }} {{ produce.quantity.unit }}</span>
      </span>
    </div>
  {% endfor %}
{% endcapture %}

{% unless product.metafields.custom.sydney_area_produce.value == blank%}
  <div class="week-harvest" {{ block.shopify_attributes }}>
    <div class="week-harvest-header-controller">
      <h2 class="noselect">See what&apos;s in the box?</h2>
      <span class="svg-wrapper controller-caret">
        {{- 'icon-caret.svg' | inline_asset_content -}}
      </span>
    </div>
    <div class="week-harvest-title wp-hidden">
      <span class="week-harvest-title-heading">
        <span>Weekly harvest for Sydney deliveries</span>
        <span class="week-harvest-title-heading-range">{{ product.metafields.custom.sydney_area_date_range }}</span>
      </span>
      {% unless sydney_content == blank %}
        <span class="custom-select-wrapper">
          <div class="custom-select" style="width: 250px">
            <select>
              <option
                value="sydney"
                {% if sydney_content != blank %}selected{% endif %}
                {% if sydney_content == blank %}disabled{% endif %}
              >Sydney</option>
            </select>
          </div>
        </span>
      {% endunless %}
    </div>

    <div class="week-harvest-content wp-hidden">
      {{ sydney_content }}
    </div>
  </div>
{% endunless %}

<script>
  function getFormattedWeekRange(timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone) {
    const currentDate = new Date(new Date().toLocaleString('en-US', { timeZone }));
    const currentDayOfWeek = currentDate.getDay();
    const diffToMonday = currentDayOfWeek === 0 ? 6 : currentDayOfWeek - 1;
    const monday = new Date(currentDate);
    monday.setDate(currentDate.getDate() - diffToMonday);

    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);

    const formatDate = (date) => {
        const day = date.getDate();
        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // zero-padded month
        return `${day}.${month}`;
    };

    return `${formatDate(monday)} - ${formatDate(sunday)}`;
  }

  const changeContent = (location) => {
    const toHide = document.querySelectorAll(`div[data-location]:not(.wp-hidden)`);
    toHide.forEach(i => i.classList.add('wp-hidden'));

    const toShow = document.querySelectorAll(`div[data-location="${location}"]`);
    toShow.forEach(i => i.classList.remove('wp-hidden'));

    let range;
    if (location === 'sydney') {
      range = '{{ product.metafields.custom.sydney_area_date_range }}'
    }

    if (!range) {
      range = getFormattedWeekRange();
    }

    document.querySelectorAll('.week-harvest-title-heading-range').forEach(s => s.textContent = range);
  }

  const initializeSelect = () => {
    const customSelectElements = document.getElementsByClassName("custom-select");
    
    for (let i = 0; i < customSelectElements.length; i++) {
      const selectElement = customSelectElements[i].getElementsByTagName("select")[0];
  
      const selectedDiv = document.createElement("DIV");
      selectedDiv.setAttribute("class", "select-selected");
      selectedDiv.innerHTML = selectElement.options[selectElement.selectedIndex].innerHTML;
      selectedDiv.setAttribute("data-value", selectElement.options[selectElement.selectedIndex].value);
      customSelectElements[i].appendChild(selectedDiv);
  
      const optionsDiv = document.createElement("DIV");
      optionsDiv.setAttribute("class", "select-items select-hide");
  
      for (let j = 0; j < selectElement.length; j++) {
        const optionDiv = document.createElement("DIV");
        optionDiv.innerHTML = selectElement.options[j].innerHTML;
        optionDiv.setAttribute("data-value", selectElement.options[j].value);
        if (selectElement.options[j].disabled) {
          optionDiv.setAttribute("disabled", "true");
        }
        if (selectElement.options[j].getAttribute('selected') === '') {
          optionDiv.classList.add('same-as-selected');
        }
  
        optionDiv.addEventListener("click", function(e) {
          if (this.getAttribute('disabled')) {
            e.preventDefault();
            return;
          }
          const selectBox = this.parentNode.parentNode.getElementsByTagName("select")[0];
          const previousSelectedDiv = this.parentNode.previousSibling;
          changeContent(this.dataset['value']);
  
          for (let k = 0; k < selectBox.length; k++) {
            if (selectBox.options[k].innerHTML == this.innerHTML) {
              selectBox.selectedIndex = k;
              previousSelectedDiv.innerHTML = this.innerHTML;
  
              const optionsList = this.parentNode.getElementsByClassName("same-as-selected");
              const numOfOptionDivs = optionsList.length;
  
              for (let l = 0; l < numOfOptionDivs; l++) {
                optionsList[l].removeAttribute("class");
              }
  
              this.setAttribute("class", "same-as-selected");
              break;
            }
          }
          previousSelectedDiv.click();
        });
  
        optionsDiv.appendChild(optionDiv);
      }
  
      customSelectElements[i].appendChild(optionsDiv);
  
      selectedDiv.addEventListener("click", function(e) {
        e.stopPropagation();
        closeAllSelectBoxes(this);
        this.nextSibling.classList.toggle("select-hide");
        this.classList.toggle("select-arrow-active");
      });
  
      changeContent(selectedDiv.dataset['value']);
    }
  
    function closeAllSelectBoxes(currentSelectBox) {
      const allOptionsDivs = document.getElementsByClassName("select-items");
      const allSelectedDivs = document.getElementsByClassName("select-selected");
      const arrNo = [];
  
      for (let i = 0; i < allSelectedDivs.length; i++) {
        if (currentSelectBox == allSelectedDivs[i]) {
          arrNo.push(i);
        } else {
          allSelectedDivs[i].classList.remove("select-arrow-active");
        }
      }
  
      for (let i = 0; i < allOptionsDivs.length; i++) {
        if (arrNo.indexOf(i) == -1) {
          allOptionsDivs[i].classList.add("select-hide");
        }
      }
    }
  
    document.addEventListener("click", closeAllSelectBoxes);
  }

  document.addEventListener('DOMContentLoaded', initializeSelect);
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.week-harvest.wp-hidden').forEach(e => e.classList.remove('wp-hidden'));
    const customSelectElements = document.getElementsByClassName("custom-select");
    if (customSelectElements.length === 0) {
      document.querySelectorAll('.week-harvest-content .week-harvest-content-item.wp-hidden').forEach(e => e.classList.remove('wp-hidden'));
    }
  });

  function toggleController() {
    const parent = event.target.closest(".week-harvest");
    if (!parent) {
      return;
    }

    const title = parent.querySelector(".week-harvest-title");
    const content = parent.querySelector(".week-harvest-content");
    const caret = parent.querySelector(".controller-caret");

    title.classList.toggle('wp-hidden');
    content.classList.toggle('wp-hidden');
    caret.classList.toggle('wp-flip');
    parent.classList.toggle('open');
  }

  [...document.getElementsByClassName("week-harvest-header-controller")]
    .forEach(controller => controller.addEventListener("click", toggleController));
</script>
